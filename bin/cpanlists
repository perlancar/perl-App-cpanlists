#!/usr/bin/perl

use 5.010001;
use strict;
use warnings;
use Log::Any '$log';

use Perinci::CmdLine;
#use Perinci::Access;
use Perinci::Access::HTTP::Client;

# VERSION

our %SPEC;

#my $pa = Perinci::Access->new;
my $pah = Perinci::Access::HTTP::Client->new;

my $conf_path = "$ENV{HOME}/.cpanlists.conf.json";
my $conf;

$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0;

sub __read_conf {
    require File::Slurp;
    require JSON;

    my $json = JSON->new->allow_nonref;
    if (-f $conf_path) {
        $log->debugf("Reading configuration file %s ...", $conf_path);
        $conf = $json->decode(~~File::Slurp::read_file($conf_path));
    }
}

sub __conf {
    __read_conf() unless $conf;
    die "Configuration file $conf_path not found, please 'register' ".
        "or 'login-via-bitcard' or write configuration file manually first\n"
            unless $conf;
    $conf;
}

sub __write_conf {
    require File::Slurp;
    require JSON;

    my ($conf, $cond) = @_;

    my $json = JSON->new->allow_nonref;
    return if $cond && (-f $conf_path);
    $log->warnf("Writing configuration file %s ...", $conf_path);
    File::Slurp::write_file($conf_path, $json->encode($conf));
}

$SPEC{register} = {
    v => 1.1,
    summary => 'Register an account at cpanlists.org',
    description => <<'_',

After an account is successfully created, will write to `~/.cpanlists.json.conf`
something like:

    {"user":"USER", "pass":"PASS"}

If you have an existing account, you can instead of
_
    args => {
        username => {
            schema => 'str*',
            req => 1,
            pos => 0,
        },
        email => {
            schema => 'str*',
            req => 1,
            pos => 1,
        },
        password => {
            schema => 'str*',
            pos => 2,
            description => <<'_',

If not specified, a random one will be generated.

_
        },
    },
};
sub register {
    my %args = @_;
    my $password = $args{password};
    my $pass_gen;

    if (!defined($password)) {
        $password = int(rand()*900000 + 100000);
        $pass_gen++;
    }

    my $res = $pah->request(
        call => "https://cpanlists.org/api/App/cpanlists/Server/create_user",
        {args => {username => $args{username}, email => $args{email},
                  password => $password}},
    );
    return $res unless $res->[0] == 200;

    __write_conf({username=>$args{username}, password=>$password}, 1);
    if ($pass_gen) {
        [200, "OK", "Password is $password"];
    } else {
        [200, "OK"];
    }
}

$SPEC{login_via_bitcard} = {
    v => 1.1,
    summary => 'Login via Bitcard',
    description => <<'_',
_
    args => {
        # email
        # username
        # bitcard password
    },
};
sub login_via_bitcard {
    [502, "Sorry, not yet implemented. Not really apt without a browser interface. Please use 'register' instead."];
}

# ---

my $url     = $ENV{API_URL} // "https://cpanlists.org/api";
my $api_url = "$url/App/cpanlists/Server";

__read_conf();

my $cmd = Perinci::CmdLine->new(
    #url => "$url/",
    summary => 'Command-line client to cpanlists.org',
    subcommands => {
        # public actions
        'register'          => {url=>'/main/register'},
        'login_via_bitcard' => {url=>'/main/login_via_bitcard'},

        'lists'             => {url=>"$api_url/list_lists"},
        'get'               => {url=>"$api_url/get_list"},

        # actions requiring authentication
        'my_lists'          => {url=>"$api_url/list_my_lists"},
        'create'            => {url=>"$api_url/create_list"},
        'delete'            => {url=>"$api_url/delete_list"},
        'add_item'          => {url=>"$api_url/add_item"},
        'delete_item'       => {url=>"$api_url/delete_item"},

        'like'              => {url=>"$api_url/like_list"},
        'unlike'            => {url=>"$api_url/unlike_list"},

        'comment'           => {url=>"$api_url/comment_list"},
        'delete_comment'    => {url=>"$api_url/delete_list_comment"},
    },
    pa_options => {
        handler_args => {
            user     => $conf ? $conf->{username} : undef,
            password => $conf ? $conf->{password} : undef,
        },
    },
);
$cmd->run;

1;
# ABSTRACT: Create personal lists of CPAN modules/authors
# PODNAME: cpanlists

=head1 SYNOPSIS

 ### register an account first (TODO: login via PAUSE/github/etc). you can leave
 ### out --password and a random one will be generated.

 % cpanlists register --username fido --email fido@example.com --password pass123

 ### search for existing lists

 % cpanlists lists
 .----+-------------------------------------+--------.
 | ID | Title                               | User   |
 +----+-------------------------------------+--------+
 | 1  | My favorite CPAN modules            | steven |
 | 2  | My favorites                        | neilb  |
 | 1  | CPAN modules to get a module's path | neilb  |
 '----+-------------------------------------+--------'

 % cpanlists 'favorite'
 .----+-------------------------------------+--------.
 | ID | Title                               | User   |
 +----+-------------------------------------+--------+
 | 1  | My favorite CPAN modules            | steven |
 | 2  | My favorites                        | neilb  |
 '----+-------------------------------------+--------'

 % cpanlists lists 'Mojo::DOM'; # display all lists containing some module

 % cpanlists lists --like; # list modules which you have liked

 ### display a list's contents

 % cpanlists get 1

 ### create a list

 % cpanlists create "Fido's favorite modules in 2013"
 List ID is: 23

 ### add item to a list

 % cpanlists add-item 23 WWW::Mechanize "Indispensable for automating web stuffs"
 % cpanlists add-item 23 Mojo::DOM "Another indispensable tool for scraping"
 % cpanlists add-item 23 Foo::Bar ; # no comment

 ### delete item from your list

 % cpanlists delete-item 23 Foo::Bar

 ### list your lists

 % cpanlists my-lists

 ### like a list

 % cpanlists like 2
 % cpanlists unlike 2

 ### comment on (and optionally like) a list

 % cpanlists comment 1 "Thanks for including my module Qux::Quux as your favorite"
 % cpanlists comment 3 "You forgot Module::Path::Super" --like

 ### delete your list

 % cpanlists delete 23


=head1 DESCRIPTION

Command-line interface to http://cpanlists.org

Currently only supports lists of modules.


=head1 SEE ALSO

http://blogs.perl.org/users/neilb/2013/03/the-cpan-unknown-usage-problem.html

=cut
